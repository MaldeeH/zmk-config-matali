/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


/ {
        behaviors {
                // Number row with SHIFT modifiers
                n1_excl: n1_excl {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp N1>, <&kp EXCL>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                n2_dqt: n2_dqt {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp N2>, <&kp DQT>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                n3_sect: n3_sect {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp N3>, <&kp NON_US_HASH>; // § symbol
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                n4_dllr: n4_dllr {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp N4>, <&kp DLLR>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                n5_prcnt: n5_prcnt {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp N5>, <&kp PRCNT>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                n6_amps: n6_amps {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp N6>, <&kp AMPS>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                n7_fslh: n7_fslh {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp N7>, <&kp FSLH>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                n8_bslh: n8_bslh {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp N8>, <&kp BSLH>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                n9_equal: n9_equal {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp N9>, <&kp EQUAL>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                n0_qmark: n0_qmark {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp N0>, <&kp QMARK>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                // Letters with MOD layer modifier (assuming MOD is a layer)
                s_lpar: s_lpar {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp S>, <&kp LPAR>;
                        mods = <(MOD_RALT)>; // Using Right Alt (AltGr) as MOD key
                };
                d_rpar: d_rpar {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp D>, <&kp RPAR>;
                        mods = <(MOD_RALT)>;
                };
                f_lbkt: f_lbkt {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp F>, <&kp LBKT>;
                        mods = <(MOD_RALT)>;
                };
                g_rbkt: g_rbkt {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp G>, <&kp RBKT>;
                        mods = <(MOD_RALT)>;
                };
                h_lt: h_lt {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp H>, <&kp LT>;
                        mods = <(MOD_RALT)>;
                };
                j_lbrc: j_lbrc {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp J>, <&kp LBRC>;
                        mods = <(MOD_RALT)>;
                };
                k_rbrc: k_rbrc {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp K>, <&kp RBRC>;
                        mods = <(MOD_RALT)>;
                };
                l_gt: l_gt {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp L>, <&kp GT>;
                        mods = <(MOD_RALT)>;
                };
                
                // German umlauts and special chars with MOD
                semi_umlaut_u: semi_umlaut_u {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp SEMI>, <&kp RA(SEMI)>; // ü using AltGr+semicolon
                        mods = <(MOD_RALT)>;
                };
                comma_umlaut_o: comma_umlaut_o {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp COMMA>, <&kp RA(COMMA)>; // ö using AltGr+comma  
                        mods = <(MOD_RALT)>;
                };
                dot_umlaut_a: dot_umlaut_a {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&dot_colon>, <&kp RA(DOT)>; // ä using AltGr+period
                        mods = <(MOD_RALT)>;
                };
                
                // Special characters
                plus_star: plus_star {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp PLUS>, <&kp STAR>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                plus_tilde: plus_tilde {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp PLUS>, <&kp TILDE>;
                        mods = <(MOD_RALT)>;
                };
                
                dot_colon: dot_colon {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp DOT>, <&kp COLON>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                
                minus_under: minus_under {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp MINUS>, <&kp UNDER>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                // Function key morphs for ESC and DEL with MOD
                esc_f11: esc_f11 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp ESC>, <&kp F11>;
                        mods = <(MOD_RALT)>;
                };
                del_f12: del_f12 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp DEL>, <&kp F12>;
                        mods = <(MOD_RALT)>;
                };

                // Function key morphs for numbers 1-0 with MOD
                n1_f1: n1_f1 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&n1_excl>, <&kp F1>;
                        mods = <(MOD_RALT)>;
                };
                n2_f2: n2_f2 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&n2_dqt>, <&kp F2>;
                        mods = <(MOD_RALT)>;
                };
                n3_f3: n3_f3 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&n3_sect>, <&kp F3>;
                        mods = <(MOD_RALT)>;
                };
                n4_f4: n4_f4 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&n4_dllr>, <&kp F4>;
                        mods = <(MOD_RALT)>;
                };
                n5_f5: n5_f5 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&n5_prcnt>, <&kp F5>;
                        mods = <(MOD_RALT)>;
                };
                n6_f6: n6_f6 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&n6_amps>, <&kp F6>;
                        mods = <(MOD_RALT)>;
                };
                n7_f7: n7_f7 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&n7_fslh>, <&kp F7>;
                        mods = <(MOD_RALT)>;
                };
                n8_f8: n8_f8 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&n8_bslh>, <&kp F8>;
                        mods = <(MOD_RALT)>;
                };
                n9_f9: n9_f9 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&n9_equal>, <&kp F9>;
                        mods = <(MOD_RALT)>;
                };
                n0_f10: n0_f10 {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&n0_qmark>, <&kp F10>;
                        mods = <(MOD_RALT)>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  0  | DEL  |
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | MOD2 |
// | SHFT |  +  |  Z  |  X  |  C  |  V  |   |  B  |  N   |  M  |  ,  |  .  |  -   |
//                    | LALT| ENT | WIN |   | RALT| SPACE| LYR |

// LYR is the button that switches layers
// "1" is "!" when used with SHFT
// "2" is """ when used with SHFT
// "3" is "§" when used with SHFT
// "4" is "$" when used with SHFT
// "5" is "%" when used with SHFT
// "6" is "&" when used with SHFT
// "7" is "/" when used with SHFT
// "8" is "\" when used with SHFT
// "9" is "=" when used with SHFT
// "0" is "?" when used with SHFT

// Mod should need to be held down to access these signs:
// "S" is "(" when used with MOD
// "D" is ")" when used with MOD
// "F" is "[" when used with MOD
// "G" is "]" when used with MOD
// "H" is "<" when used with MOD
// "J" is "{" when used with MOD
// "K" is "}" when used with MOD
// "L" is ">" when used with MOD
// ";" is "ü" when used with MOD
// "," is "ö" when used with MOD
// "." is "ä" when used with MOD
// "." is ":" when used with SHFT
// "+" is "*" when used with SHFT
// "+" is "~" when used with MOD
// "-" is "_" when used with SHFT
// MOD with Numbers 1-10 are F1 to F10
// F11 is ESC with MOD
// F12 is DEL with MOD

                        bindings = <
   &esc_f11 &n1_f1 &n2_f2 &n3_f3 &n4_f4 &n5_f5         &n6_f6 &n7_f7  &n8_f8  &n9_f9   &n0_f10  &del_f12 
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T              &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &s_lpar &d_rpar &f_lbkt &g_rbkt      &h_lt &j_lbrc  &k_rbrc  &l_gt   &semi_umlaut_u &kp RET
   &kp LSHFT &plus_star &kp Z &kp X &kp C &kp V         &kp B &kp N  &kp M &comma_umlaut_o &dot_umlaut_a &minus_under
                  &kp LALT &kp RET &kp LGUI                &kp RALT &kp SPACE  &mo 1
                        >;
                };
                lower_layer{
// This layer just has the bluetooth clear button: BT_CLR_ALL  and the layer switch button LYR
// -----------------------------------------------------------------------------------------
// |    |     |     |     |     |     |      |     |     |     |     |     |    |
// |    |     |     |     |     |     |      |     |     |     |     |     |    |
// |    |     |     |     |     |     |      |     |     |     |     |     |    |
// |    |     |     |     |     |     |      |     |     |     |     |     |    |
//                  |     |     |     |      |     | BT_CLR_ALL| LYR |
                        bindings = <
   &trans &trans &trans &trans &trans &trans         &trans &trans &trans &trans &trans &trans 
   &trans &trans &trans &trans &trans &trans         &trans &trans &trans &trans &trans &trans
   &trans &trans &trans &trans &trans &trans         &trans &trans &trans &trans &trans &bt BT_CLR_ALL 
   &trans &trans &trans &trans &trans &trans         &trans &trans &trans &trans &trans &trans
                  &trans &trans &trans                &trans &bt BT_CLR_ALL &trans
                        >;
                };
        };
};
